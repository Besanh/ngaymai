// Code generated by MockGen. DO NOT EDIT.
// Source: common/sqlclient/sql.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bun "github.com/uptrace/bun"
)

// MockISqlClientConn is a mock of ISqlClientConn interface.
type MockISqlClientConn struct {
	ctrl     *gomock.Controller
	recorder *MockISqlClientConnMockRecorder
}

// MockISqlClientConnMockRecorder is the mock recorder for MockISqlClientConn.
type MockISqlClientConnMockRecorder struct {
	mock *MockISqlClientConn
}

// NewMockISqlClientConn creates a new mock instance.
func NewMockISqlClientConn(ctrl *gomock.Controller) *MockISqlClientConn {
	mock := &MockISqlClientConn{ctrl: ctrl}
	mock.recorder = &MockISqlClientConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlClientConn) EXPECT() *MockISqlClientConnMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockISqlClientConn) Connect(secretKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", secretKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockISqlClientConnMockRecorder) Connect(secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockISqlClientConn)(nil).Connect), secretKey)
}

// GetDB mocks base method.
func (m *MockISqlClientConn) GetDB() *bun.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*bun.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockISqlClientConnMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockISqlClientConn)(nil).GetDB))
}
